#include <Wire.h>
#include <math.h>

/**
   感應器區 sensor measurement
*/
#define LEFTEYE A0 // Sharp IR GP2Y0A41SK0F (4-30cm, analog)
#define MIDEYE A1 // Sharp IR GP2Y0A41SK0F (4-30cm, analog)
#define RIGHTEYE A2 // Sharp IR GP2Y0A41SK0F (4-30cm, analog)
#define MIDRIGHTEYE A3 // Sharp IR GP2Y0A41SK0F (4-30cm, analog)
const int RIGHT = 0, MID = 1, LEFT = 2, MIDRIGHT = 3;
float sensorValue[4] = {0}; //0=right 1=mid 2=left 3=midRight

/**
   車子規格區 car measurement
*/
const float wd = 107.0;//兩輪中心距離 in mm
const float carWidth = 131.0; // mm
const float turn90MS = 170.0;//右轉90度所需時間
const float carVec = 685.0;//車子以 tP 前進1秒的距離，mm per seconds
const float safeDistance = 1000; //tp=200時，看到障礙物到完全煞停的所需距離
const float turnSD = safeDistance + carWidth * 5; //障礙物前煞停+轉90度， 用safeTest()測

/**
   PID
*/
const int pivot = 2500;//前進時要走在離牆多遠的線上 單位:1/100 cm, mm*10
int tP = 200;
float kP = 0.2;
float fkP = 0;
float kD = 0.05;
float fkD = 0;
int err = 0;
int lastErr = 0;
int deltaErr = 0;
int ferr = 0;
int flastErr = 0;
int fdeltaErr = 0;
/**
   靠左/右牆
*/
//int FOLLOWWALL = LEFT;
int FOLLOWWALL = RIGHT;

void setup()
{
  Serial.begin(115200);
  pinMode(LEFTEYE, INPUT);
  pinMode(MIDEYE, INPUT);
  pinMode(RIGHTEYE, INPUT);
  pinMode(MIDRIGHTEYE, INPUT);
  pinMode(2, OUTPUT);
  pinMode(3, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(5, OUTPUT);

  (digitalRead(12) == 1) ? FOLLOWWALL = LEFT : FOLLOWWALL = RIGHT;


}

void loop()
{
  readSensors();
  if (sensorValue[MID] <= turnSD) {
    shiftLaneTo(LEFT);
    //shiftLaneTo(RIGHT);
    while (true) brake();
  }
  else {
    moveForward();
  }



  /*
    //靠牆走
    //如果遇到障礙物
    //切換到另一邊牆
    if (isPathForward()) {
      moveForward();
    }
    else {
      if (FOLLOWWALL == RIGHT) {
        brake();
        //turnLeft();
        shiftLaneTo(LEFT);
        FOLLOWWALL = LEFT;
      }
      else {
        brake();
        //turnRight();
        shiftLaneTo(RIGHT);
        FOLLOWWALL = RIGHT;
      }
    }
  */
}
/**
  車子動作區 movement functions
*/
/**
   PD 跟隨左/右牆走
*/
void moveForward() {
  if (FOLLOWWALL == LEFT) {//左手法則
    err = pivot -  sensorValue[LEFT] ;
    deltaErr = err -  lastErr;
    lastErr = err;
    motors(int(tP + err * kP + deltaErr * kD + fkP * ferr), int(tP - err * kP - deltaErr * kD - fkP * ferr));
  }
  else if (FOLLOWWALL == RIGHT) { //右手法則
    //TODO
    err = pivot -  sensorValue[RIGHT] ;
    deltaErr = err -  lastErr;
    lastErr = err;

    ferr = 300 - sensorValue[MID]; //range: [300-40=260,0]
    fdeltaErr = ferr -  flastErr;
    flastErr = ferr;

    motors(int(tP - err * kP - deltaErr * kD - fkP * ferr - fdeltaErr * fkD), int(tP + err * kP + deltaErr * kD + fkP * ferr + fdeltaErr * fkD));

  }
}

void shiftLaneTo(int LA) {
  int a; (LA == LEFT) ? a = 1 : a = -1;
  int v = tP;
  motorsMs(-v * a, v * a, turn90MS / 2); //轉45度 cos(45) = 0.525
  motorsMs(v, v, mm2TimeMS(150));//前進
  motorsMs(v * a, -v * a, turn90MS / 1.25); //抵消慣性轉45度
  //brake();
}
void pwmTest() {
  for (int i = 0; i <= 200; i += 10) {
    motorsMs(i, i, 1000);
    brake();
  }
}
void safeTest() {
  readSensors();
  if (sensorValue[MID] <= safeDistance + carWidth * 5 ) { //TODO 需實測
    motorsMs(-tP, tP, turn90MS * 1.5); //左轉90
    while (true) brake();
  }
  else {
    motors(tP, tP);
  }
}
float mm2TimeMS(float s) {
  float error = 20.0;//實測誤差約少20mm
  return (s + error) / carVec * 1000;
}
/**
   馬達函數 motor functions
*/
/**
   motorsMs(左馬達出力, 右馬達出力, 持續毫秒數)
   函數執行完畢，馬達狀態會維持住，除非呼叫其他馬達函數。
*/
void motorsMs(int L, int R, int ms) {
  motors(L, R);
  delay(ms);
}

/**
   motors(左馬達出力, 右馬達出力)
   函數執行完畢，馬達狀態會維持住，除非呼叫其他馬達函數。
*/
void motors(int L, int R) {
  //Serial.print(L);
  //Serial.print(" --- ");
  //Serial.println(R);
  int bias = 0;
  digitalWrite(4, L >= 0 ? 0 : 1);
  analogWrite(5, L >= 0 ? min(L, 255) : min(255 + L, 255));
  digitalWrite(2, R >= 0 ? 0 : 1);
  analogWrite(3, R >= 0 ? min(R - bias, 255) : min(255 + R - bias, 255));
}

/**
   馬達不出力，滑行n毫秒
*/
void coast(int n) {
  digitalWrite(2, 0);
  analogWrite(3, 0);
  digitalWrite(4, 0);
  analogWrite(5, 0);
  delay(n);
}

/*
   馬達煞停，會有立即的停頓感
*/
void brake() {
  /*
    digitalWrite(2, 1);
    analogWrite(3, 1);
    digitalWrite(4, 1);
    analogWrite(5, 1);
  */

  digitalWrite(2, 1);
  analogWrite(3, 255);
  digitalWrite(4, 1);
  analogWrite(5, 255);
  //delay(2);

}


/**
   感測器區sensor functions
*/
/**
   讀第 i 個 存到感測器陣列備用
*/
void readSensors() {
  sensorValue[LEFT] = VtoCentM(analogRead(LEFTEYE));
  sensorValue[MID] = VtoCentM(analogRead(MIDEYE));
  sensorValue[RIGHT] = VtoCentM(analogRead(RIGHTEYE));
  sensorValue[MIDRIGHT] = VtoCentM(analogRead(MIDRIGHTEYE));
  Serial.print(sensorValue[LEFT]); Serial.print(",");
  Serial.print(sensorValue[MID]); Serial.print(",");
  Serial.print(sensorValue[MIDRIGHT]); Serial.print(",");
  Serial.println(sensorValue[RIGHT]);
}
float VtoCentM(int ana) {
  float volts = ana * 0.0048828125; // value from sensor * (5/1024)
  float distance = 13 * pow(volts, -1) * 100; // worked out from datasheet graph
  if (distance <= 3000) return distance;
  else return 3000;
}

