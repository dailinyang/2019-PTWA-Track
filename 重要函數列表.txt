

//int 代表整數; float 代表小數; const 代表程式執行中不能被改變的數
int tP = 120;
const int turn90MS = 280;//轉90度所需時間
const int safeDistance = 1000; //tp=時，看到障礙物到完全煞停的所需距離 用safeDistTest()測,1/100 cm
const int turnSD = safeDistance + 300; //障礙物前煞停+轉90度， 用turnSDTest()測,1/100 cm
const int carVec = 5000;//車子以 tP 前進1秒的距離，1/100cm per second
//PID
const int pivot = 1700;//前進時要走在離牆多遠的線上 單位:1/100 cm, mm*10 cos(30)=0.866 cos(60)=0.5
float kP = 0.4;//正比於err造成的輪速改變 => 影響誤差反應幅度
float kD = 0;
const int errMax = int(tP / kP / 1.15); //err上限，影響 tP 可變範圍，越大則 tP 可變範圍越大，則可做出越尖銳的轉彎
const int errDeadzone = 10; // 1/100 cm 反應死區

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


moveForward() //摸著牆走

turn90(int dir) //往dir方向盲轉90度
pingandLeftTurn90() //左轉90度，時間用盡 或 前面沒牆了 則停止
float pm2TimeMS(float s) //s in 1/100 cm 輸入距離s轉為以 carVec 前進所需時間

motorsMs(int L, int R, int ms) //驅動馬達(左馬達出力, 右馬達出力,持續ms)
motors(int L, int R) //驅動馬達(左馬達出力, 右馬達出力)
coast(int n)//馬達滑行
brake() //馬達煞停

readSensors() //讀所有感應器，讀完會儲存在sensorValue[RIGHT],sensorValue[MIDRIGHT],sensorValue[MIDLEFT],sensorValue[LEFT]四個格子中
bool isRightWalled()  //讀一次右眼，判斷右邊有牆嗎?
bool isFrontWalled()  //讀一次前眼，判斷前面有牆嗎?
int getDistanceCentCM(int v)  //紅外線伏特換算成距離，單位為1/100公分

int crampErr(int err) //限制err的上下限